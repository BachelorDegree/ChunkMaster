// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunkmaster.proto

#ifndef PROTOBUF_INCLUDED_chunkmaster_2eproto
#define PROTOBUF_INCLUDED_chunkmaster_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chunkmaster_2eproto 

namespace protobuf_chunkmaster_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chunkmaster_2eproto
namespace chunkmaster {
class AllocateUploadSlicesReq;
class AllocateUploadSlicesReqDefaultTypeInternal;
extern AllocateUploadSlicesReqDefaultTypeInternal _AllocateUploadSlicesReq_default_instance_;
class AllocateUploadSlicesRsp;
class AllocateUploadSlicesRspDefaultTypeInternal;
extern AllocateUploadSlicesRspDefaultTypeInternal _AllocateUploadSlicesRsp_default_instance_;
class AllocateUploadSlicesRsp_Slice;
class AllocateUploadSlicesRsp_SliceDefaultTypeInternal;
extern AllocateUploadSlicesRsp_SliceDefaultTypeInternal _AllocateUploadSlicesRsp_Slice_default_instance_;
class ChunkInformation;
class ChunkInformationDefaultTypeInternal;
extern ChunkInformationDefaultTypeInternal _ChunkInformation_default_instance_;
class FinishUploadSliceReq;
class FinishUploadSliceReqDefaultTypeInternal;
extern FinishUploadSliceReqDefaultTypeInternal _FinishUploadSliceReq_default_instance_;
class FinishUploadSliceRsp;
class FinishUploadSliceRspDefaultTypeInternal;
extern FinishUploadSliceRspDefaultTypeInternal _FinishUploadSliceRsp_default_instance_;
class ReportChunkInformationReq;
class ReportChunkInformationReqDefaultTypeInternal;
extern ReportChunkInformationReqDefaultTypeInternal _ReportChunkInformationReq_default_instance_;
class ReportChunkInformationRsp;
class ReportChunkInformationRspDefaultTypeInternal;
extern ReportChunkInformationRspDefaultTypeInternal _ReportChunkInformationRsp_default_instance_;
}  // namespace chunkmaster
namespace google {
namespace protobuf {
template<> ::chunkmaster::AllocateUploadSlicesReq* Arena::CreateMaybeMessage<::chunkmaster::AllocateUploadSlicesReq>(Arena*);
template<> ::chunkmaster::AllocateUploadSlicesRsp* Arena::CreateMaybeMessage<::chunkmaster::AllocateUploadSlicesRsp>(Arena*);
template<> ::chunkmaster::AllocateUploadSlicesRsp_Slice* Arena::CreateMaybeMessage<::chunkmaster::AllocateUploadSlicesRsp_Slice>(Arena*);
template<> ::chunkmaster::ChunkInformation* Arena::CreateMaybeMessage<::chunkmaster::ChunkInformation>(Arena*);
template<> ::chunkmaster::FinishUploadSliceReq* Arena::CreateMaybeMessage<::chunkmaster::FinishUploadSliceReq>(Arena*);
template<> ::chunkmaster::FinishUploadSliceRsp* Arena::CreateMaybeMessage<::chunkmaster::FinishUploadSliceRsp>(Arena*);
template<> ::chunkmaster::ReportChunkInformationReq* Arena::CreateMaybeMessage<::chunkmaster::ReportChunkInformationReq>(Arena*);
template<> ::chunkmaster::ReportChunkInformationRsp* Arena::CreateMaybeMessage<::chunkmaster::ReportChunkInformationRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chunkmaster {

enum ChunkState {
  STANDBY = 0,
  WRITING = 1,
  ERROR = 2,
  MOVING = 3,
  EMPTY = 4,
  EMPTYERROR = 5,
  ChunkState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChunkState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChunkState_IsValid(int value);
const ChunkState ChunkState_MIN = STANDBY;
const ChunkState ChunkState_MAX = EMPTYERROR;
const int ChunkState_ARRAYSIZE = ChunkState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChunkState_descriptor();
inline const ::std::string& ChunkState_Name(ChunkState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChunkState_descriptor(), value);
}
inline bool ChunkState_Parse(
    const ::std::string& name, ChunkState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChunkState>(
    ChunkState_descriptor(), name, value);
}
// ===================================================================

class AllocateUploadSlicesReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.AllocateUploadSlicesReq) */ {
 public:
  AllocateUploadSlicesReq();
  virtual ~AllocateUploadSlicesReq();

  AllocateUploadSlicesReq(const AllocateUploadSlicesReq& from);

  inline AllocateUploadSlicesReq& operator=(const AllocateUploadSlicesReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateUploadSlicesReq(AllocateUploadSlicesReq&& from) noexcept
    : AllocateUploadSlicesReq() {
    *this = ::std::move(from);
  }

  inline AllocateUploadSlicesReq& operator=(AllocateUploadSlicesReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateUploadSlicesReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateUploadSlicesReq* internal_default_instance() {
    return reinterpret_cast<const AllocateUploadSlicesReq*>(
               &_AllocateUploadSlicesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AllocateUploadSlicesReq* other);
  friend void swap(AllocateUploadSlicesReq& a, AllocateUploadSlicesReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateUploadSlicesReq* New() const final {
    return CreateMaybeMessage<AllocateUploadSlicesReq>(NULL);
  }

  AllocateUploadSlicesReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateUploadSlicesReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateUploadSlicesReq& from);
  void MergeFrom(const AllocateUploadSlicesReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateUploadSlicesReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 data_length = 1;
  void clear_data_length();
  static const int kDataLengthFieldNumber = 1;
  ::google::protobuf::uint64 data_length() const;
  void set_data_length(::google::protobuf::uint64 value);

  // uint32 replica_policy = 2;
  void clear_replica_policy();
  static const int kReplicaPolicyFieldNumber = 2;
  ::google::protobuf::uint32 replica_policy() const;
  void set_replica_policy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:chunkmaster.AllocateUploadSlicesReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 data_length_;
  ::google::protobuf::uint32 replica_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllocateUploadSlicesRsp_Slice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.AllocateUploadSlicesRsp.Slice) */ {
 public:
  AllocateUploadSlicesRsp_Slice();
  virtual ~AllocateUploadSlicesRsp_Slice();

  AllocateUploadSlicesRsp_Slice(const AllocateUploadSlicesRsp_Slice& from);

  inline AllocateUploadSlicesRsp_Slice& operator=(const AllocateUploadSlicesRsp_Slice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateUploadSlicesRsp_Slice(AllocateUploadSlicesRsp_Slice&& from) noexcept
    : AllocateUploadSlicesRsp_Slice() {
    *this = ::std::move(from);
  }

  inline AllocateUploadSlicesRsp_Slice& operator=(AllocateUploadSlicesRsp_Slice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateUploadSlicesRsp_Slice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateUploadSlicesRsp_Slice* internal_default_instance() {
    return reinterpret_cast<const AllocateUploadSlicesRsp_Slice*>(
               &_AllocateUploadSlicesRsp_Slice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AllocateUploadSlicesRsp_Slice* other);
  friend void swap(AllocateUploadSlicesRsp_Slice& a, AllocateUploadSlicesRsp_Slice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateUploadSlicesRsp_Slice* New() const final {
    return CreateMaybeMessage<AllocateUploadSlicesRsp_Slice>(NULL);
  }

  AllocateUploadSlicesRsp_Slice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateUploadSlicesRsp_Slice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateUploadSlicesRsp_Slice& from);
  void MergeFrom(const AllocateUploadSlicesRsp_Slice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateUploadSlicesRsp_Slice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 physical_slice_id = 3;
  int physical_slice_id_size() const;
  void clear_physical_slice_id();
  static const int kPhysicalSliceIdFieldNumber = 3;
  ::google::protobuf::uint64 physical_slice_id(int index) const;
  void set_physical_slice_id(int index, ::google::protobuf::uint64 value);
  void add_physical_slice_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      physical_slice_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_physical_slice_id();

  // uint64 logical_slice_id = 1;
  void clear_logical_slice_id();
  static const int kLogicalSliceIdFieldNumber = 1;
  ::google::protobuf::uint64 logical_slice_id() const;
  void set_logical_slice_id(::google::protobuf::uint64 value);

  // uint64 data_length = 2;
  void clear_data_length();
  static const int kDataLengthFieldNumber = 2;
  ::google::protobuf::uint64 data_length() const;
  void set_data_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chunkmaster.AllocateUploadSlicesRsp.Slice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > physical_slice_id_;
  mutable int _physical_slice_id_cached_byte_size_;
  ::google::protobuf::uint64 logical_slice_id_;
  ::google::protobuf::uint64 data_length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllocateUploadSlicesRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.AllocateUploadSlicesRsp) */ {
 public:
  AllocateUploadSlicesRsp();
  virtual ~AllocateUploadSlicesRsp();

  AllocateUploadSlicesRsp(const AllocateUploadSlicesRsp& from);

  inline AllocateUploadSlicesRsp& operator=(const AllocateUploadSlicesRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllocateUploadSlicesRsp(AllocateUploadSlicesRsp&& from) noexcept
    : AllocateUploadSlicesRsp() {
    *this = ::std::move(from);
  }

  inline AllocateUploadSlicesRsp& operator=(AllocateUploadSlicesRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateUploadSlicesRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllocateUploadSlicesRsp* internal_default_instance() {
    return reinterpret_cast<const AllocateUploadSlicesRsp*>(
               &_AllocateUploadSlicesRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AllocateUploadSlicesRsp* other);
  friend void swap(AllocateUploadSlicesRsp& a, AllocateUploadSlicesRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllocateUploadSlicesRsp* New() const final {
    return CreateMaybeMessage<AllocateUploadSlicesRsp>(NULL);
  }

  AllocateUploadSlicesRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllocateUploadSlicesRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllocateUploadSlicesRsp& from);
  void MergeFrom(const AllocateUploadSlicesRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllocateUploadSlicesRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AllocateUploadSlicesRsp_Slice Slice;

  // accessors -------------------------------------------------------

  // repeated .chunkmaster.AllocateUploadSlicesRsp.Slice slices = 1;
  int slices_size() const;
  void clear_slices();
  static const int kSlicesFieldNumber = 1;
  ::chunkmaster::AllocateUploadSlicesRsp_Slice* mutable_slices(int index);
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSlicesRsp_Slice >*
      mutable_slices();
  const ::chunkmaster::AllocateUploadSlicesRsp_Slice& slices(int index) const;
  ::chunkmaster::AllocateUploadSlicesRsp_Slice* add_slices();
  const ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSlicesRsp_Slice >&
      slices() const;

  // @@protoc_insertion_point(class_scope:chunkmaster.AllocateUploadSlicesRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSlicesRsp_Slice > slices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FinishUploadSliceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.FinishUploadSliceReq) */ {
 public:
  FinishUploadSliceReq();
  virtual ~FinishUploadSliceReq();

  FinishUploadSliceReq(const FinishUploadSliceReq& from);

  inline FinishUploadSliceReq& operator=(const FinishUploadSliceReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishUploadSliceReq(FinishUploadSliceReq&& from) noexcept
    : FinishUploadSliceReq() {
    *this = ::std::move(from);
  }

  inline FinishUploadSliceReq& operator=(FinishUploadSliceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishUploadSliceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishUploadSliceReq* internal_default_instance() {
    return reinterpret_cast<const FinishUploadSliceReq*>(
               &_FinishUploadSliceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FinishUploadSliceReq* other);
  friend void swap(FinishUploadSliceReq& a, FinishUploadSliceReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishUploadSliceReq* New() const final {
    return CreateMaybeMessage<FinishUploadSliceReq>(NULL);
  }

  FinishUploadSliceReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FinishUploadSliceReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FinishUploadSliceReq& from);
  void MergeFrom(const FinishUploadSliceReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishUploadSliceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 physical_slice_id = 1;
  void clear_physical_slice_id();
  static const int kPhysicalSliceIdFieldNumber = 1;
  ::google::protobuf::uint64 physical_slice_id() const;
  void set_physical_slice_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:chunkmaster.FinishUploadSliceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 physical_slice_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FinishUploadSliceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.FinishUploadSliceRsp) */ {
 public:
  FinishUploadSliceRsp();
  virtual ~FinishUploadSliceRsp();

  FinishUploadSliceRsp(const FinishUploadSliceRsp& from);

  inline FinishUploadSliceRsp& operator=(const FinishUploadSliceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishUploadSliceRsp(FinishUploadSliceRsp&& from) noexcept
    : FinishUploadSliceRsp() {
    *this = ::std::move(from);
  }

  inline FinishUploadSliceRsp& operator=(FinishUploadSliceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishUploadSliceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishUploadSliceRsp* internal_default_instance() {
    return reinterpret_cast<const FinishUploadSliceRsp*>(
               &_FinishUploadSliceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FinishUploadSliceRsp* other);
  friend void swap(FinishUploadSliceRsp& a, FinishUploadSliceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishUploadSliceRsp* New() const final {
    return CreateMaybeMessage<FinishUploadSliceRsp>(NULL);
  }

  FinishUploadSliceRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FinishUploadSliceRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FinishUploadSliceRsp& from);
  void MergeFrom(const FinishUploadSliceRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinishUploadSliceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chunkmaster.FinishUploadSliceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChunkInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.ChunkInformation) */ {
 public:
  ChunkInformation();
  virtual ~ChunkInformation();

  ChunkInformation(const ChunkInformation& from);

  inline ChunkInformation& operator=(const ChunkInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkInformation(ChunkInformation&& from) noexcept
    : ChunkInformation() {
    *this = ::std::move(from);
  }

  inline ChunkInformation& operator=(ChunkInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkInformation* internal_default_instance() {
    return reinterpret_cast<const ChunkInformation*>(
               &_ChunkInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ChunkInformation* other);
  friend void swap(ChunkInformation& a, ChunkInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkInformation* New() const final {
    return CreateMaybeMessage<ChunkInformation>(NULL);
  }

  ChunkInformation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChunkInformation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChunkInformation& from);
  void MergeFrom(const ChunkInformation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 chunk_id = 1;
  void clear_chunk_id();
  static const int kChunkIdFieldNumber = 1;
  ::google::protobuf::uint64 chunk_id() const;
  void set_chunk_id(::google::protobuf::uint64 value);

  // uint32 logical_used_space = 2;
  void clear_logical_used_space();
  static const int kLogicalUsedSpaceFieldNumber = 2;
  ::google::protobuf::uint32 logical_used_space() const;
  void set_logical_used_space(::google::protobuf::uint32 value);

  // uint32 actual_used_space = 3;
  void clear_actual_used_space();
  static const int kActualUsedSpaceFieldNumber = 3;
  ::google::protobuf::uint32 actual_used_space() const;
  void set_actual_used_space(::google::protobuf::uint32 value);

  // .chunkmaster.ChunkState state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::chunkmaster::ChunkState state() const;
  void set_state(::chunkmaster::ChunkState value);

  // @@protoc_insertion_point(class_scope:chunkmaster.ChunkInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 chunk_id_;
  ::google::protobuf::uint32 logical_used_space_;
  ::google::protobuf::uint32 actual_used_space_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportChunkInformationReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.ReportChunkInformationReq) */ {
 public:
  ReportChunkInformationReq();
  virtual ~ReportChunkInformationReq();

  ReportChunkInformationReq(const ReportChunkInformationReq& from);

  inline ReportChunkInformationReq& operator=(const ReportChunkInformationReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportChunkInformationReq(ReportChunkInformationReq&& from) noexcept
    : ReportChunkInformationReq() {
    *this = ::std::move(from);
  }

  inline ReportChunkInformationReq& operator=(ReportChunkInformationReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportChunkInformationReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportChunkInformationReq* internal_default_instance() {
    return reinterpret_cast<const ReportChunkInformationReq*>(
               &_ReportChunkInformationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReportChunkInformationReq* other);
  friend void swap(ReportChunkInformationReq& a, ReportChunkInformationReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportChunkInformationReq* New() const final {
    return CreateMaybeMessage<ReportChunkInformationReq>(NULL);
  }

  ReportChunkInformationReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportChunkInformationReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportChunkInformationReq& from);
  void MergeFrom(const ReportChunkInformationReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportChunkInformationReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  int chunk_info_size() const;
  void clear_chunk_info();
  static const int kChunkInfoFieldNumber = 1;
  ::chunkmaster::ChunkInformation* mutable_chunk_info(int index);
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >*
      mutable_chunk_info();
  const ::chunkmaster::ChunkInformation& chunk_info(int index) const;
  ::chunkmaster::ChunkInformation* add_chunk_info();
  const ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >&
      chunk_info() const;

  // @@protoc_insertion_point(class_scope:chunkmaster.ReportChunkInformationReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation > chunk_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportChunkInformationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chunkmaster.ReportChunkInformationRsp) */ {
 public:
  ReportChunkInformationRsp();
  virtual ~ReportChunkInformationRsp();

  ReportChunkInformationRsp(const ReportChunkInformationRsp& from);

  inline ReportChunkInformationRsp& operator=(const ReportChunkInformationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportChunkInformationRsp(ReportChunkInformationRsp&& from) noexcept
    : ReportChunkInformationRsp() {
    *this = ::std::move(from);
  }

  inline ReportChunkInformationRsp& operator=(ReportChunkInformationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportChunkInformationRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportChunkInformationRsp* internal_default_instance() {
    return reinterpret_cast<const ReportChunkInformationRsp*>(
               &_ReportChunkInformationRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ReportChunkInformationRsp* other);
  friend void swap(ReportChunkInformationRsp& a, ReportChunkInformationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportChunkInformationRsp* New() const final {
    return CreateMaybeMessage<ReportChunkInformationRsp>(NULL);
  }

  ReportChunkInformationRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportChunkInformationRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportChunkInformationRsp& from);
  void MergeFrom(const ReportChunkInformationRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportChunkInformationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chunkmaster.ReportChunkInformationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chunkmaster_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AllocateUploadSlicesReq

// uint64 data_length = 1;
inline void AllocateUploadSlicesReq::clear_data_length() {
  data_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocateUploadSlicesReq::data_length() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSlicesReq.data_length)
  return data_length_;
}
inline void AllocateUploadSlicesReq::set_data_length(::google::protobuf::uint64 value) {
  
  data_length_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSlicesReq.data_length)
}

// uint32 replica_policy = 2;
inline void AllocateUploadSlicesReq::clear_replica_policy() {
  replica_policy_ = 0u;
}
inline ::google::protobuf::uint32 AllocateUploadSlicesReq::replica_policy() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSlicesReq.replica_policy)
  return replica_policy_;
}
inline void AllocateUploadSlicesReq::set_replica_policy(::google::protobuf::uint32 value) {
  
  replica_policy_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSlicesReq.replica_policy)
}

// -------------------------------------------------------------------

// AllocateUploadSlicesRsp_Slice

// uint64 logical_slice_id = 1;
inline void AllocateUploadSlicesRsp_Slice::clear_logical_slice_id() {
  logical_slice_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocateUploadSlicesRsp_Slice::logical_slice_id() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSlicesRsp.Slice.logical_slice_id)
  return logical_slice_id_;
}
inline void AllocateUploadSlicesRsp_Slice::set_logical_slice_id(::google::protobuf::uint64 value) {
  
  logical_slice_id_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSlicesRsp.Slice.logical_slice_id)
}

// uint64 data_length = 2;
inline void AllocateUploadSlicesRsp_Slice::clear_data_length() {
  data_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AllocateUploadSlicesRsp_Slice::data_length() const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSlicesRsp.Slice.data_length)
  return data_length_;
}
inline void AllocateUploadSlicesRsp_Slice::set_data_length(::google::protobuf::uint64 value) {
  
  data_length_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSlicesRsp.Slice.data_length)
}

// repeated uint64 physical_slice_id = 3;
inline int AllocateUploadSlicesRsp_Slice::physical_slice_id_size() const {
  return physical_slice_id_.size();
}
inline void AllocateUploadSlicesRsp_Slice::clear_physical_slice_id() {
  physical_slice_id_.Clear();
}
inline ::google::protobuf::uint64 AllocateUploadSlicesRsp_Slice::physical_slice_id(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSlicesRsp.Slice.physical_slice_id)
  return physical_slice_id_.Get(index);
}
inline void AllocateUploadSlicesRsp_Slice::set_physical_slice_id(int index, ::google::protobuf::uint64 value) {
  physical_slice_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:chunkmaster.AllocateUploadSlicesRsp.Slice.physical_slice_id)
}
inline void AllocateUploadSlicesRsp_Slice::add_physical_slice_id(::google::protobuf::uint64 value) {
  physical_slice_id_.Add(value);
  // @@protoc_insertion_point(field_add:chunkmaster.AllocateUploadSlicesRsp.Slice.physical_slice_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AllocateUploadSlicesRsp_Slice::physical_slice_id() const {
  // @@protoc_insertion_point(field_list:chunkmaster.AllocateUploadSlicesRsp.Slice.physical_slice_id)
  return physical_slice_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AllocateUploadSlicesRsp_Slice::mutable_physical_slice_id() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.AllocateUploadSlicesRsp.Slice.physical_slice_id)
  return &physical_slice_id_;
}

// -------------------------------------------------------------------

// AllocateUploadSlicesRsp

// repeated .chunkmaster.AllocateUploadSlicesRsp.Slice slices = 1;
inline int AllocateUploadSlicesRsp::slices_size() const {
  return slices_.size();
}
inline void AllocateUploadSlicesRsp::clear_slices() {
  slices_.Clear();
}
inline ::chunkmaster::AllocateUploadSlicesRsp_Slice* AllocateUploadSlicesRsp::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:chunkmaster.AllocateUploadSlicesRsp.slices)
  return slices_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSlicesRsp_Slice >*
AllocateUploadSlicesRsp::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.AllocateUploadSlicesRsp.slices)
  return &slices_;
}
inline const ::chunkmaster::AllocateUploadSlicesRsp_Slice& AllocateUploadSlicesRsp::slices(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.AllocateUploadSlicesRsp.slices)
  return slices_.Get(index);
}
inline ::chunkmaster::AllocateUploadSlicesRsp_Slice* AllocateUploadSlicesRsp::add_slices() {
  // @@protoc_insertion_point(field_add:chunkmaster.AllocateUploadSlicesRsp.slices)
  return slices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chunkmaster::AllocateUploadSlicesRsp_Slice >&
AllocateUploadSlicesRsp::slices() const {
  // @@protoc_insertion_point(field_list:chunkmaster.AllocateUploadSlicesRsp.slices)
  return slices_;
}

// -------------------------------------------------------------------

// FinishUploadSliceReq

// uint64 physical_slice_id = 1;
inline void FinishUploadSliceReq::clear_physical_slice_id() {
  physical_slice_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FinishUploadSliceReq::physical_slice_id() const {
  // @@protoc_insertion_point(field_get:chunkmaster.FinishUploadSliceReq.physical_slice_id)
  return physical_slice_id_;
}
inline void FinishUploadSliceReq::set_physical_slice_id(::google::protobuf::uint64 value) {
  
  physical_slice_id_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.FinishUploadSliceReq.physical_slice_id)
}

// -------------------------------------------------------------------

// FinishUploadSliceRsp

// -------------------------------------------------------------------

// ChunkInformation

// uint64 chunk_id = 1;
inline void ChunkInformation::clear_chunk_id() {
  chunk_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChunkInformation::chunk_id() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.chunk_id)
  return chunk_id_;
}
inline void ChunkInformation::set_chunk_id(::google::protobuf::uint64 value) {
  
  chunk_id_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.chunk_id)
}

// uint32 logical_used_space = 2;
inline void ChunkInformation::clear_logical_used_space() {
  logical_used_space_ = 0u;
}
inline ::google::protobuf::uint32 ChunkInformation::logical_used_space() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.logical_used_space)
  return logical_used_space_;
}
inline void ChunkInformation::set_logical_used_space(::google::protobuf::uint32 value) {
  
  logical_used_space_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.logical_used_space)
}

// uint32 actual_used_space = 3;
inline void ChunkInformation::clear_actual_used_space() {
  actual_used_space_ = 0u;
}
inline ::google::protobuf::uint32 ChunkInformation::actual_used_space() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.actual_used_space)
  return actual_used_space_;
}
inline void ChunkInformation::set_actual_used_space(::google::protobuf::uint32 value) {
  
  actual_used_space_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.actual_used_space)
}

// .chunkmaster.ChunkState state = 4;
inline void ChunkInformation::clear_state() {
  state_ = 0;
}
inline ::chunkmaster::ChunkState ChunkInformation::state() const {
  // @@protoc_insertion_point(field_get:chunkmaster.ChunkInformation.state)
  return static_cast< ::chunkmaster::ChunkState >(state_);
}
inline void ChunkInformation::set_state(::chunkmaster::ChunkState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:chunkmaster.ChunkInformation.state)
}

// -------------------------------------------------------------------

// ReportChunkInformationReq

// repeated .chunkmaster.ChunkInformation chunk_info = 1;
inline int ReportChunkInformationReq::chunk_info_size() const {
  return chunk_info_.size();
}
inline void ReportChunkInformationReq::clear_chunk_info() {
  chunk_info_.Clear();
}
inline ::chunkmaster::ChunkInformation* ReportChunkInformationReq::mutable_chunk_info(int index) {
  // @@protoc_insertion_point(field_mutable:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >*
ReportChunkInformationReq::mutable_chunk_info() {
  // @@protoc_insertion_point(field_mutable_list:chunkmaster.ReportChunkInformationReq.chunk_info)
  return &chunk_info_;
}
inline const ::chunkmaster::ChunkInformation& ReportChunkInformationReq::chunk_info(int index) const {
  // @@protoc_insertion_point(field_get:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_.Get(index);
}
inline ::chunkmaster::ChunkInformation* ReportChunkInformationReq::add_chunk_info() {
  // @@protoc_insertion_point(field_add:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chunkmaster::ChunkInformation >&
ReportChunkInformationReq::chunk_info() const {
  // @@protoc_insertion_point(field_list:chunkmaster.ReportChunkInformationReq.chunk_info)
  return chunk_info_;
}

// -------------------------------------------------------------------

// ReportChunkInformationRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chunkmaster

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chunkmaster::ChunkState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chunkmaster::ChunkState>() {
  return ::chunkmaster::ChunkState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chunkmaster_2eproto
