// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chunkmaster.proto

#include "chunkmaster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chunkmaster_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chunkmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AllocateUploadSlicesRsp_Slice;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chunkmaster_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInformation;
}  // namespace protobuf_chunkmaster_2eproto
namespace chunkmaster {
class AllocateUploadSlicesReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateUploadSlicesReq>
      _instance;
} _AllocateUploadSlicesReq_default_instance_;
class AllocateUploadSlicesRsp_SliceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateUploadSlicesRsp_Slice>
      _instance;
} _AllocateUploadSlicesRsp_Slice_default_instance_;
class AllocateUploadSlicesRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllocateUploadSlicesRsp>
      _instance;
} _AllocateUploadSlicesRsp_default_instance_;
class FinishUploadSliceReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishUploadSliceReq>
      _instance;
} _FinishUploadSliceReq_default_instance_;
class FinishUploadSliceRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishUploadSliceRsp>
      _instance;
} _FinishUploadSliceRsp_default_instance_;
class ChunkInformationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChunkInformation>
      _instance;
} _ChunkInformation_default_instance_;
class ReportChunkInformationReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportChunkInformationReq>
      _instance;
} _ReportChunkInformationReq_default_instance_;
class ReportChunkInformationRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportChunkInformationRsp>
      _instance;
} _ReportChunkInformationRsp_default_instance_;
}  // namespace chunkmaster
namespace protobuf_chunkmaster_2eproto {
static void InitDefaultsAllocateUploadSlicesReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_AllocateUploadSlicesReq_default_instance_;
    new (ptr) ::chunkmaster::AllocateUploadSlicesReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::AllocateUploadSlicesReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateUploadSlicesReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateUploadSlicesReq}, {}};

static void InitDefaultsAllocateUploadSlicesRsp_Slice() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_AllocateUploadSlicesRsp_Slice_default_instance_;
    new (ptr) ::chunkmaster::AllocateUploadSlicesRsp_Slice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::AllocateUploadSlicesRsp_Slice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AllocateUploadSlicesRsp_Slice =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAllocateUploadSlicesRsp_Slice}, {}};

static void InitDefaultsAllocateUploadSlicesRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_AllocateUploadSlicesRsp_default_instance_;
    new (ptr) ::chunkmaster::AllocateUploadSlicesRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::AllocateUploadSlicesRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AllocateUploadSlicesRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAllocateUploadSlicesRsp}, {
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesRsp_Slice.base,}};

static void InitDefaultsFinishUploadSliceReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_FinishUploadSliceReq_default_instance_;
    new (ptr) ::chunkmaster::FinishUploadSliceReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::FinishUploadSliceReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishUploadSliceReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishUploadSliceReq}, {}};

static void InitDefaultsFinishUploadSliceRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_FinishUploadSliceRsp_default_instance_;
    new (ptr) ::chunkmaster::FinishUploadSliceRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::FinishUploadSliceRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FinishUploadSliceRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFinishUploadSliceRsp}, {}};

static void InitDefaultsChunkInformation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_ChunkInformation_default_instance_;
    new (ptr) ::chunkmaster::ChunkInformation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::ChunkInformation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChunkInformation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChunkInformation}, {}};

static void InitDefaultsReportChunkInformationReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_ReportChunkInformationReq_default_instance_;
    new (ptr) ::chunkmaster::ReportChunkInformationReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::ReportChunkInformationReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportChunkInformationReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportChunkInformationReq}, {
      &protobuf_chunkmaster_2eproto::scc_info_ChunkInformation.base,}};

static void InitDefaultsReportChunkInformationRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chunkmaster::_ReportChunkInformationRsp_default_instance_;
    new (ptr) ::chunkmaster::ReportChunkInformationRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chunkmaster::ReportChunkInformationRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReportChunkInformationRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReportChunkInformationRsp}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateUploadSlicesReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateUploadSlicesRsp_Slice.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllocateUploadSlicesRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishUploadSliceReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FinishUploadSliceRsp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChunkInformation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportChunkInformationReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportChunkInformationRsp.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesReq, data_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesReq, replica_policy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesRsp_Slice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesRsp_Slice, logical_slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesRsp_Slice, data_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesRsp_Slice, physical_slice_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::AllocateUploadSlicesRsp, slices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceReq, physical_slice_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::FinishUploadSliceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, chunk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, logical_used_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, actual_used_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ChunkInformation, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ReportChunkInformationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ReportChunkInformationReq, chunk_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chunkmaster::ReportChunkInformationRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chunkmaster::AllocateUploadSlicesReq)},
  { 7, -1, sizeof(::chunkmaster::AllocateUploadSlicesRsp_Slice)},
  { 15, -1, sizeof(::chunkmaster::AllocateUploadSlicesRsp)},
  { 21, -1, sizeof(::chunkmaster::FinishUploadSliceReq)},
  { 27, -1, sizeof(::chunkmaster::FinishUploadSliceRsp)},
  { 32, -1, sizeof(::chunkmaster::ChunkInformation)},
  { 41, -1, sizeof(::chunkmaster::ReportChunkInformationReq)},
  { 47, -1, sizeof(::chunkmaster::ReportChunkInformationRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_AllocateUploadSlicesReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_AllocateUploadSlicesRsp_Slice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_AllocateUploadSlicesRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_FinishUploadSliceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_FinishUploadSliceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_ChunkInformation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_ReportChunkInformationReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chunkmaster::_ReportChunkInformationRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chunkmaster.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021chunkmaster.proto\022\013chunkmaster\"F\n\027Allo"
      "cateUploadSlicesReq\022\023\n\013data_length\030\001 \001(\004"
      "\022\026\n\016replica_policy\030\002 \001(\r\"\250\001\n\027AllocateUpl"
      "oadSlicesRsp\022:\n\006slices\030\001 \003(\0132*.chunkmast"
      "er.AllocateUploadSlicesRsp.Slice\032Q\n\005Slic"
      "e\022\030\n\020logical_slice_id\030\001 \001(\004\022\023\n\013data_leng"
      "th\030\002 \001(\004\022\031\n\021physical_slice_id\030\003 \003(\004\"1\n\024F"
      "inishUploadSliceReq\022\031\n\021physical_slice_id"
      "\030\001 \001(\004\"\026\n\024FinishUploadSliceRsp\"\203\001\n\020Chunk"
      "Information\022\020\n\010chunk_id\030\001 \001(\004\022\032\n\022logical"
      "_used_space\030\002 \001(\r\022\031\n\021actual_used_space\030\003"
      " \001(\r\022&\n\005state\030\004 \001(\0162\027.chunkmaster.ChunkS"
      "tate\"N\n\031ReportChunkInformationReq\0221\n\nchu"
      "nk_info\030\001 \003(\0132\035.chunkmaster.ChunkInforma"
      "tion\"\033\n\031ReportChunkInformationRsp*X\n\nChu"
      "nkState\022\013\n\007STANDBY\020\000\022\013\n\007WRITING\020\001\022\t\n\005ERR"
      "OR\020\002\022\n\n\006MOVING\020\003\022\t\n\005EMPTY\020\004\022\016\n\nEMPTYERRO"
      "R\020\0052\276\002\n\022ChunkMasterService\022c\n\025AllocatedU"
      "ploadSlices\022$.chunkmaster.AllocateUpload"
      "SlicesReq\032$.chunkmaster.AllocateUploadSl"
      "icesRsp\022Y\n\021FinishUploadSlice\022!.chunkmast"
      "er.FinishUploadSliceReq\032!.chunkmaster.Fi"
      "nishUploadSliceRsp\022h\n\026ReportChunkInforma"
      "tion\022&.chunkmaster.ReportChunkInformatio"
      "nReq\032&.chunkmaster.ReportChunkInformatio"
      "nRspb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1012);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chunkmaster.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chunkmaster_2eproto
namespace chunkmaster {
const ::google::protobuf::EnumDescriptor* ChunkState_descriptor() {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chunkmaster_2eproto::file_level_enum_descriptors[0];
}
bool ChunkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AllocateUploadSlicesReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateUploadSlicesReq::kDataLengthFieldNumber;
const int AllocateUploadSlicesReq::kReplicaPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateUploadSlicesReq::AllocateUploadSlicesReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.AllocateUploadSlicesReq)
}
AllocateUploadSlicesReq::AllocateUploadSlicesReq(const AllocateUploadSlicesReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_length_, &from.data_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&replica_policy_) -
    reinterpret_cast<char*>(&data_length_)) + sizeof(replica_policy_));
  // @@protoc_insertion_point(copy_constructor:chunkmaster.AllocateUploadSlicesReq)
}

void AllocateUploadSlicesReq::SharedCtor() {
  ::memset(&data_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_policy_) -
      reinterpret_cast<char*>(&data_length_)) + sizeof(replica_policy_));
}

AllocateUploadSlicesReq::~AllocateUploadSlicesReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.AllocateUploadSlicesReq)
  SharedDtor();
}

void AllocateUploadSlicesReq::SharedDtor() {
}

void AllocateUploadSlicesReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateUploadSlicesReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateUploadSlicesReq& AllocateUploadSlicesReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesReq.base);
  return *internal_default_instance();
}


void AllocateUploadSlicesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.AllocateUploadSlicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replica_policy_) -
      reinterpret_cast<char*>(&data_length_)) + sizeof(replica_policy_));
  _internal_metadata_.Clear();
}

bool AllocateUploadSlicesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.AllocateUploadSlicesReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 data_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 replica_policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replica_policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.AllocateUploadSlicesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.AllocateUploadSlicesReq)
  return false;
#undef DO_
}

void AllocateUploadSlicesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.AllocateUploadSlicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->data_length(), output);
  }

  // uint32 replica_policy = 2;
  if (this->replica_policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replica_policy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.AllocateUploadSlicesReq)
}

::google::protobuf::uint8* AllocateUploadSlicesReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.AllocateUploadSlicesReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->data_length(), target);
  }

  // uint32 replica_policy = 2;
  if (this->replica_policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replica_policy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.AllocateUploadSlicesReq)
  return target;
}

size_t AllocateUploadSlicesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.AllocateUploadSlicesReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 data_length = 1;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data_length());
  }

  // uint32 replica_policy = 2;
  if (this->replica_policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replica_policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateUploadSlicesReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.AllocateUploadSlicesReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateUploadSlicesReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateUploadSlicesReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.AllocateUploadSlicesReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.AllocateUploadSlicesReq)
    MergeFrom(*source);
  }
}

void AllocateUploadSlicesReq::MergeFrom(const AllocateUploadSlicesReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.AllocateUploadSlicesReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_length() != 0) {
    set_data_length(from.data_length());
  }
  if (from.replica_policy() != 0) {
    set_replica_policy(from.replica_policy());
  }
}

void AllocateUploadSlicesReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.AllocateUploadSlicesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateUploadSlicesReq::CopyFrom(const AllocateUploadSlicesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.AllocateUploadSlicesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateUploadSlicesReq::IsInitialized() const {
  return true;
}

void AllocateUploadSlicesReq::Swap(AllocateUploadSlicesReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateUploadSlicesReq::InternalSwap(AllocateUploadSlicesReq* other) {
  using std::swap;
  swap(data_length_, other->data_length_);
  swap(replica_policy_, other->replica_policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateUploadSlicesReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateUploadSlicesRsp_Slice::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateUploadSlicesRsp_Slice::kLogicalSliceIdFieldNumber;
const int AllocateUploadSlicesRsp_Slice::kDataLengthFieldNumber;
const int AllocateUploadSlicesRsp_Slice::kPhysicalSliceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateUploadSlicesRsp_Slice::AllocateUploadSlicesRsp_Slice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesRsp_Slice.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.AllocateUploadSlicesRsp.Slice)
}
AllocateUploadSlicesRsp_Slice::AllocateUploadSlicesRsp_Slice(const AllocateUploadSlicesRsp_Slice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      physical_slice_id_(from.physical_slice_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logical_slice_id_, &from.logical_slice_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_length_) -
    reinterpret_cast<char*>(&logical_slice_id_)) + sizeof(data_length_));
  // @@protoc_insertion_point(copy_constructor:chunkmaster.AllocateUploadSlicesRsp.Slice)
}

void AllocateUploadSlicesRsp_Slice::SharedCtor() {
  ::memset(&logical_slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&logical_slice_id_)) + sizeof(data_length_));
}

AllocateUploadSlicesRsp_Slice::~AllocateUploadSlicesRsp_Slice() {
  // @@protoc_insertion_point(destructor:chunkmaster.AllocateUploadSlicesRsp.Slice)
  SharedDtor();
}

void AllocateUploadSlicesRsp_Slice::SharedDtor() {
}

void AllocateUploadSlicesRsp_Slice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateUploadSlicesRsp_Slice::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateUploadSlicesRsp_Slice& AllocateUploadSlicesRsp_Slice::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesRsp_Slice.base);
  return *internal_default_instance();
}


void AllocateUploadSlicesRsp_Slice::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physical_slice_id_.Clear();
  ::memset(&logical_slice_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&logical_slice_id_)) + sizeof(data_length_));
  _internal_metadata_.Clear();
}

bool AllocateUploadSlicesRsp_Slice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 logical_slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logical_slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 data_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 physical_slice_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_physical_slice_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_physical_slice_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.AllocateUploadSlicesRsp.Slice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.AllocateUploadSlicesRsp.Slice)
  return false;
#undef DO_
}

void AllocateUploadSlicesRsp_Slice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 logical_slice_id = 1;
  if (this->logical_slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->logical_slice_id(), output);
  }

  // uint64 data_length = 2;
  if (this->data_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->data_length(), output);
  }

  // repeated uint64 physical_slice_id = 3;
  if (this->physical_slice_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _physical_slice_id_cached_byte_size_));
  }
  for (int i = 0, n = this->physical_slice_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->physical_slice_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.AllocateUploadSlicesRsp.Slice)
}

::google::protobuf::uint8* AllocateUploadSlicesRsp_Slice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 logical_slice_id = 1;
  if (this->logical_slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->logical_slice_id(), target);
  }

  // uint64 data_length = 2;
  if (this->data_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->data_length(), target);
  }

  // repeated uint64 physical_slice_id = 3;
  if (this->physical_slice_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _physical_slice_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->physical_slice_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.AllocateUploadSlicesRsp.Slice)
  return target;
}

size_t AllocateUploadSlicesRsp_Slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 physical_slice_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->physical_slice_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _physical_slice_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 logical_slice_id = 1;
  if (this->logical_slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->logical_slice_id());
  }

  // uint64 data_length = 2;
  if (this->data_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateUploadSlicesRsp_Slice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateUploadSlicesRsp_Slice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateUploadSlicesRsp_Slice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.AllocateUploadSlicesRsp.Slice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.AllocateUploadSlicesRsp.Slice)
    MergeFrom(*source);
  }
}

void AllocateUploadSlicesRsp_Slice::MergeFrom(const AllocateUploadSlicesRsp_Slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  physical_slice_id_.MergeFrom(from.physical_slice_id_);
  if (from.logical_slice_id() != 0) {
    set_logical_slice_id(from.logical_slice_id());
  }
  if (from.data_length() != 0) {
    set_data_length(from.data_length());
  }
}

void AllocateUploadSlicesRsp_Slice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateUploadSlicesRsp_Slice::CopyFrom(const AllocateUploadSlicesRsp_Slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.AllocateUploadSlicesRsp.Slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateUploadSlicesRsp_Slice::IsInitialized() const {
  return true;
}

void AllocateUploadSlicesRsp_Slice::Swap(AllocateUploadSlicesRsp_Slice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateUploadSlicesRsp_Slice::InternalSwap(AllocateUploadSlicesRsp_Slice* other) {
  using std::swap;
  physical_slice_id_.InternalSwap(&other->physical_slice_id_);
  swap(logical_slice_id_, other->logical_slice_id_);
  swap(data_length_, other->data_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateUploadSlicesRsp_Slice::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AllocateUploadSlicesRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocateUploadSlicesRsp::kSlicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocateUploadSlicesRsp::AllocateUploadSlicesRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.AllocateUploadSlicesRsp)
}
AllocateUploadSlicesRsp::AllocateUploadSlicesRsp(const AllocateUploadSlicesRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slices_(from.slices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.AllocateUploadSlicesRsp)
}

void AllocateUploadSlicesRsp::SharedCtor() {
}

AllocateUploadSlicesRsp::~AllocateUploadSlicesRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.AllocateUploadSlicesRsp)
  SharedDtor();
}

void AllocateUploadSlicesRsp::SharedDtor() {
}

void AllocateUploadSlicesRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AllocateUploadSlicesRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllocateUploadSlicesRsp& AllocateUploadSlicesRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_AllocateUploadSlicesRsp.base);
  return *internal_default_instance();
}


void AllocateUploadSlicesRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.AllocateUploadSlicesRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slices_.Clear();
  _internal_metadata_.Clear();
}

bool AllocateUploadSlicesRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.AllocateUploadSlicesRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chunkmaster.AllocateUploadSlicesRsp.Slice slices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_slices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.AllocateUploadSlicesRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.AllocateUploadSlicesRsp)
  return false;
#undef DO_
}

void AllocateUploadSlicesRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.AllocateUploadSlicesRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.AllocateUploadSlicesRsp.Slice slices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->slices(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.AllocateUploadSlicesRsp)
}

::google::protobuf::uint8* AllocateUploadSlicesRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.AllocateUploadSlicesRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.AllocateUploadSlicesRsp.Slice slices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->slices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->slices(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.AllocateUploadSlicesRsp)
  return target;
}

size_t AllocateUploadSlicesRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.AllocateUploadSlicesRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chunkmaster.AllocateUploadSlicesRsp.Slice slices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->slices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->slices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateUploadSlicesRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.AllocateUploadSlicesRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateUploadSlicesRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocateUploadSlicesRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.AllocateUploadSlicesRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.AllocateUploadSlicesRsp)
    MergeFrom(*source);
  }
}

void AllocateUploadSlicesRsp::MergeFrom(const AllocateUploadSlicesRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.AllocateUploadSlicesRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slices_.MergeFrom(from.slices_);
}

void AllocateUploadSlicesRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.AllocateUploadSlicesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateUploadSlicesRsp::CopyFrom(const AllocateUploadSlicesRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.AllocateUploadSlicesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateUploadSlicesRsp::IsInitialized() const {
  return true;
}

void AllocateUploadSlicesRsp::Swap(AllocateUploadSlicesRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocateUploadSlicesRsp::InternalSwap(AllocateUploadSlicesRsp* other) {
  using std::swap;
  CastToBase(&slices_)->InternalSwap(CastToBase(&other->slices_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AllocateUploadSlicesRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishUploadSliceReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishUploadSliceReq::kPhysicalSliceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishUploadSliceReq::FinishUploadSliceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.FinishUploadSliceReq)
}
FinishUploadSliceReq::FinishUploadSliceReq(const FinishUploadSliceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  physical_slice_id_ = from.physical_slice_id_;
  // @@protoc_insertion_point(copy_constructor:chunkmaster.FinishUploadSliceReq)
}

void FinishUploadSliceReq::SharedCtor() {
  physical_slice_id_ = GOOGLE_ULONGLONG(0);
}

FinishUploadSliceReq::~FinishUploadSliceReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.FinishUploadSliceReq)
  SharedDtor();
}

void FinishUploadSliceReq::SharedDtor() {
}

void FinishUploadSliceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishUploadSliceReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishUploadSliceReq& FinishUploadSliceReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceReq.base);
  return *internal_default_instance();
}


void FinishUploadSliceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.FinishUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physical_slice_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool FinishUploadSliceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.FinishUploadSliceReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 physical_slice_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &physical_slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.FinishUploadSliceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.FinishUploadSliceReq)
  return false;
#undef DO_
}

void FinishUploadSliceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.FinishUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 physical_slice_id = 1;
  if (this->physical_slice_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->physical_slice_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.FinishUploadSliceReq)
}

::google::protobuf::uint8* FinishUploadSliceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.FinishUploadSliceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 physical_slice_id = 1;
  if (this->physical_slice_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->physical_slice_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.FinishUploadSliceReq)
  return target;
}

size_t FinishUploadSliceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.FinishUploadSliceReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 physical_slice_id = 1;
  if (this->physical_slice_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->physical_slice_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishUploadSliceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.FinishUploadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishUploadSliceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishUploadSliceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.FinishUploadSliceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.FinishUploadSliceReq)
    MergeFrom(*source);
  }
}

void FinishUploadSliceReq::MergeFrom(const FinishUploadSliceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.FinishUploadSliceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.physical_slice_id() != 0) {
    set_physical_slice_id(from.physical_slice_id());
  }
}

void FinishUploadSliceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.FinishUploadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishUploadSliceReq::CopyFrom(const FinishUploadSliceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.FinishUploadSliceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishUploadSliceReq::IsInitialized() const {
  return true;
}

void FinishUploadSliceReq::Swap(FinishUploadSliceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishUploadSliceReq::InternalSwap(FinishUploadSliceReq* other) {
  using std::swap;
  swap(physical_slice_id_, other->physical_slice_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishUploadSliceReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishUploadSliceRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishUploadSliceRsp::FinishUploadSliceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.FinishUploadSliceRsp)
}
FinishUploadSliceRsp::FinishUploadSliceRsp(const FinishUploadSliceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.FinishUploadSliceRsp)
}

void FinishUploadSliceRsp::SharedCtor() {
}

FinishUploadSliceRsp::~FinishUploadSliceRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.FinishUploadSliceRsp)
  SharedDtor();
}

void FinishUploadSliceRsp::SharedDtor() {
}

void FinishUploadSliceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FinishUploadSliceRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishUploadSliceRsp& FinishUploadSliceRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_FinishUploadSliceRsp.base);
  return *internal_default_instance();
}


void FinishUploadSliceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.FinishUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FinishUploadSliceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.FinishUploadSliceRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.FinishUploadSliceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.FinishUploadSliceRsp)
  return false;
#undef DO_
}

void FinishUploadSliceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.FinishUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.FinishUploadSliceRsp)
}

::google::protobuf::uint8* FinishUploadSliceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.FinishUploadSliceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.FinishUploadSliceRsp)
  return target;
}

size_t FinishUploadSliceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.FinishUploadSliceRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinishUploadSliceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.FinishUploadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishUploadSliceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishUploadSliceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.FinishUploadSliceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.FinishUploadSliceRsp)
    MergeFrom(*source);
  }
}

void FinishUploadSliceRsp::MergeFrom(const FinishUploadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.FinishUploadSliceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FinishUploadSliceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.FinishUploadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishUploadSliceRsp::CopyFrom(const FinishUploadSliceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.FinishUploadSliceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishUploadSliceRsp::IsInitialized() const {
  return true;
}

void FinishUploadSliceRsp::Swap(FinishUploadSliceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishUploadSliceRsp::InternalSwap(FinishUploadSliceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FinishUploadSliceRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChunkInformation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChunkInformation::kChunkIdFieldNumber;
const int ChunkInformation::kLogicalUsedSpaceFieldNumber;
const int ChunkInformation::kActualUsedSpaceFieldNumber;
const int ChunkInformation::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChunkInformation::ChunkInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_ChunkInformation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.ChunkInformation)
}
ChunkInformation::ChunkInformation(const ChunkInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunk_id_, &from.chunk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:chunkmaster.ChunkInformation)
}

void ChunkInformation::SharedCtor() {
  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_));
}

ChunkInformation::~ChunkInformation() {
  // @@protoc_insertion_point(destructor:chunkmaster.ChunkInformation)
  SharedDtor();
}

void ChunkInformation::SharedDtor() {
}

void ChunkInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChunkInformation::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChunkInformation& ChunkInformation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_ChunkInformation.base);
  return *internal_default_instance();
}


void ChunkInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.ChunkInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&chunk_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool ChunkInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.ChunkInformation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 chunk_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 logical_used_space = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_used_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 actual_used_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actual_used_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chunkmaster.ChunkState state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::chunkmaster::ChunkState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.ChunkInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.ChunkInformation)
  return false;
#undef DO_
}

void ChunkInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.ChunkInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chunk_id(), output);
  }

  // uint32 logical_used_space = 2;
  if (this->logical_used_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->logical_used_space(), output);
  }

  // uint32 actual_used_space = 3;
  if (this->actual_used_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->actual_used_space(), output);
  }

  // .chunkmaster.ChunkState state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.ChunkInformation)
}

::google::protobuf::uint8* ChunkInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.ChunkInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chunk_id(), target);
  }

  // uint32 logical_used_space = 2;
  if (this->logical_used_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->logical_used_space(), target);
  }

  // uint32 actual_used_space = 3;
  if (this->actual_used_space() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->actual_used_space(), target);
  }

  // .chunkmaster.ChunkState state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.ChunkInformation)
  return target;
}

size_t ChunkInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.ChunkInformation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 chunk_id = 1;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->chunk_id());
  }

  // uint32 logical_used_space = 2;
  if (this->logical_used_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logical_used_space());
  }

  // uint32 actual_used_space = 3;
  if (this->actual_used_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actual_used_space());
  }

  // .chunkmaster.ChunkState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.ChunkInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChunkInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.ChunkInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.ChunkInformation)
    MergeFrom(*source);
  }
}

void ChunkInformation::MergeFrom(const ChunkInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.ChunkInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_id() != 0) {
    set_chunk_id(from.chunk_id());
  }
  if (from.logical_used_space() != 0) {
    set_logical_used_space(from.logical_used_space());
  }
  if (from.actual_used_space() != 0) {
    set_actual_used_space(from.actual_used_space());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ChunkInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.ChunkInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkInformation::CopyFrom(const ChunkInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.ChunkInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkInformation::IsInitialized() const {
  return true;
}

void ChunkInformation::Swap(ChunkInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChunkInformation::InternalSwap(ChunkInformation* other) {
  using std::swap;
  swap(chunk_id_, other->chunk_id_);
  swap(logical_used_space_, other->logical_used_space_);
  swap(actual_used_space_, other->actual_used_space_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChunkInformation::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportChunkInformationReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportChunkInformationReq::kChunkInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportChunkInformationReq::ReportChunkInformationReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.ReportChunkInformationReq)
}
ReportChunkInformationReq::ReportChunkInformationReq(const ReportChunkInformationReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chunk_info_(from.chunk_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.ReportChunkInformationReq)
}

void ReportChunkInformationReq::SharedCtor() {
}

ReportChunkInformationReq::~ReportChunkInformationReq() {
  // @@protoc_insertion_point(destructor:chunkmaster.ReportChunkInformationReq)
  SharedDtor();
}

void ReportChunkInformationReq::SharedDtor() {
}

void ReportChunkInformationReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportChunkInformationReq::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportChunkInformationReq& ReportChunkInformationReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationReq.base);
  return *internal_default_instance();
}


void ReportChunkInformationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.ReportChunkInformationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_info_.Clear();
  _internal_metadata_.Clear();
}

bool ReportChunkInformationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.ReportChunkInformationReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chunkmaster.ChunkInformation chunk_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunk_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.ReportChunkInformationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.ReportChunkInformationReq)
  return false;
#undef DO_
}

void ReportChunkInformationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.ReportChunkInformationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunk_info(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.ReportChunkInformationReq)
}

::google::protobuf::uint8* ReportChunkInformationReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.ReportChunkInformationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunk_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunk_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.ReportChunkInformationReq)
  return target;
}

size_t ReportChunkInformationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.ReportChunkInformationReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chunkmaster.ChunkInformation chunk_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunk_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunk_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportChunkInformationReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.ReportChunkInformationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportChunkInformationReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportChunkInformationReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.ReportChunkInformationReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.ReportChunkInformationReq)
    MergeFrom(*source);
  }
}

void ReportChunkInformationReq::MergeFrom(const ReportChunkInformationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.ReportChunkInformationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_info_.MergeFrom(from.chunk_info_);
}

void ReportChunkInformationReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.ReportChunkInformationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportChunkInformationReq::CopyFrom(const ReportChunkInformationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.ReportChunkInformationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportChunkInformationReq::IsInitialized() const {
  return true;
}

void ReportChunkInformationReq::Swap(ReportChunkInformationReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportChunkInformationReq::InternalSwap(ReportChunkInformationReq* other) {
  using std::swap;
  CastToBase(&chunk_info_)->InternalSwap(CastToBase(&other->chunk_info_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportChunkInformationReq::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReportChunkInformationRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportChunkInformationRsp::ReportChunkInformationRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chunkmaster.ReportChunkInformationRsp)
}
ReportChunkInformationRsp::ReportChunkInformationRsp(const ReportChunkInformationRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chunkmaster.ReportChunkInformationRsp)
}

void ReportChunkInformationRsp::SharedCtor() {
}

ReportChunkInformationRsp::~ReportChunkInformationRsp() {
  // @@protoc_insertion_point(destructor:chunkmaster.ReportChunkInformationRsp)
  SharedDtor();
}

void ReportChunkInformationRsp::SharedDtor() {
}

void ReportChunkInformationRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReportChunkInformationRsp::descriptor() {
  ::protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportChunkInformationRsp& ReportChunkInformationRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chunkmaster_2eproto::scc_info_ReportChunkInformationRsp.base);
  return *internal_default_instance();
}


void ReportChunkInformationRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chunkmaster.ReportChunkInformationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool ReportChunkInformationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chunkmaster.ReportChunkInformationRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:chunkmaster.ReportChunkInformationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chunkmaster.ReportChunkInformationRsp)
  return false;
#undef DO_
}

void ReportChunkInformationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chunkmaster.ReportChunkInformationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chunkmaster.ReportChunkInformationRsp)
}

::google::protobuf::uint8* ReportChunkInformationRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chunkmaster.ReportChunkInformationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chunkmaster.ReportChunkInformationRsp)
  return target;
}

size_t ReportChunkInformationRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chunkmaster.ReportChunkInformationRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportChunkInformationRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chunkmaster.ReportChunkInformationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportChunkInformationRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportChunkInformationRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chunkmaster.ReportChunkInformationRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chunkmaster.ReportChunkInformationRsp)
    MergeFrom(*source);
  }
}

void ReportChunkInformationRsp::MergeFrom(const ReportChunkInformationRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chunkmaster.ReportChunkInformationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReportChunkInformationRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chunkmaster.ReportChunkInformationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportChunkInformationRsp::CopyFrom(const ReportChunkInformationRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chunkmaster.ReportChunkInformationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportChunkInformationRsp::IsInitialized() const {
  return true;
}

void ReportChunkInformationRsp::Swap(ReportChunkInformationRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportChunkInformationRsp::InternalSwap(ReportChunkInformationRsp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReportChunkInformationRsp::GetMetadata() const {
  protobuf_chunkmaster_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chunkmaster_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chunkmaster
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::AllocateUploadSlicesReq* Arena::CreateMaybeMessage< ::chunkmaster::AllocateUploadSlicesReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::AllocateUploadSlicesReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::AllocateUploadSlicesRsp_Slice* Arena::CreateMaybeMessage< ::chunkmaster::AllocateUploadSlicesRsp_Slice >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::AllocateUploadSlicesRsp_Slice >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::AllocateUploadSlicesRsp* Arena::CreateMaybeMessage< ::chunkmaster::AllocateUploadSlicesRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::AllocateUploadSlicesRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::FinishUploadSliceReq* Arena::CreateMaybeMessage< ::chunkmaster::FinishUploadSliceReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::FinishUploadSliceReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::FinishUploadSliceRsp* Arena::CreateMaybeMessage< ::chunkmaster::FinishUploadSliceRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::FinishUploadSliceRsp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::ChunkInformation* Arena::CreateMaybeMessage< ::chunkmaster::ChunkInformation >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::ChunkInformation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::ReportChunkInformationReq* Arena::CreateMaybeMessage< ::chunkmaster::ReportChunkInformationReq >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::ReportChunkInformationReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chunkmaster::ReportChunkInformationRsp* Arena::CreateMaybeMessage< ::chunkmaster::ReportChunkInformationRsp >(Arena* arena) {
  return Arena::CreateInternal< ::chunkmaster::ReportChunkInformationRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
