// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chunkmaster.proto
#ifndef GRPC_chunkmaster_2eproto__INCLUDED
#define GRPC_chunkmaster_2eproto__INCLUDED

#include "chunkmaster.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chunkmaster {

class ChunkMasterService final {
 public:
  static constexpr char const* service_full_name() {
    return "chunkmaster.ChunkMasterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc  (Req) returns (Rsp);
    virtual ::grpc::Status AllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::chunkmaster::AllocateUploadSlicesRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::AllocateUploadSlicesRsp>> AsyncAllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::AllocateUploadSlicesRsp>>(AsyncAllocateUploadSlicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::AllocateUploadSlicesRsp>> PrepareAsyncAllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::AllocateUploadSlicesRsp>>(PrepareAsyncAllocateUploadSlicesRaw(context, request, cq));
    }
    virtual ::grpc::Status FinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::chunkmaster::FinishUploadSliceRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::FinishUploadSliceRsp>> AsyncFinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::FinishUploadSliceRsp>>(AsyncFinishUploadSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::FinishUploadSliceRsp>> PrepareAsyncFinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::FinishUploadSliceRsp>>(PrepareAsyncFinishUploadSliceRaw(context, request, cq));
    }
    // For ChunkServer
    virtual ::grpc::Status ReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::chunkmaster::ReportChunkInformationRsp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::ReportChunkInformationRsp>> AsyncReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::ReportChunkInformationRsp>>(AsyncReportChunkInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::ReportChunkInformationRsp>> PrepareAsyncReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::ReportChunkInformationRsp>>(PrepareAsyncReportChunkInformationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // rpc  (Req) returns (Rsp);
      virtual void AllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllocateUploadSlices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkmaster::AllocateUploadSlicesRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FinishUploadSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkmaster::FinishUploadSliceRsp* response, std::function<void(::grpc::Status)>) = 0;
      // For ChunkServer
      virtual void ReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReportChunkInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkmaster::ReportChunkInformationRsp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::AllocateUploadSlicesRsp>* AsyncAllocateUploadSlicesRaw(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::AllocateUploadSlicesRsp>* PrepareAsyncAllocateUploadSlicesRaw(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::FinishUploadSliceRsp>* AsyncFinishUploadSliceRaw(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::FinishUploadSliceRsp>* PrepareAsyncFinishUploadSliceRaw(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::ReportChunkInformationRsp>* AsyncReportChunkInformationRaw(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chunkmaster::ReportChunkInformationRsp>* PrepareAsyncReportChunkInformationRaw(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::chunkmaster::AllocateUploadSlicesRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::AllocateUploadSlicesRsp>> AsyncAllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::AllocateUploadSlicesRsp>>(AsyncAllocateUploadSlicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::AllocateUploadSlicesRsp>> PrepareAsyncAllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::AllocateUploadSlicesRsp>>(PrepareAsyncAllocateUploadSlicesRaw(context, request, cq));
    }
    ::grpc::Status FinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::chunkmaster::FinishUploadSliceRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::FinishUploadSliceRsp>> AsyncFinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::FinishUploadSliceRsp>>(AsyncFinishUploadSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::FinishUploadSliceRsp>> PrepareAsyncFinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::FinishUploadSliceRsp>>(PrepareAsyncFinishUploadSliceRaw(context, request, cq));
    }
    ::grpc::Status ReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::chunkmaster::ReportChunkInformationRsp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::ReportChunkInformationRsp>> AsyncReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::ReportChunkInformationRsp>>(AsyncReportChunkInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::ReportChunkInformationRsp>> PrepareAsyncReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chunkmaster::ReportChunkInformationRsp>>(PrepareAsyncReportChunkInformationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AllocateUploadSlices(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response, std::function<void(::grpc::Status)>) override;
      void AllocateUploadSlices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkmaster::AllocateUploadSlicesRsp* response, std::function<void(::grpc::Status)>) override;
      void FinishUploadSlice(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response, std::function<void(::grpc::Status)>) override;
      void FinishUploadSlice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkmaster::FinishUploadSliceRsp* response, std::function<void(::grpc::Status)>) override;
      void ReportChunkInformation(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response, std::function<void(::grpc::Status)>) override;
      void ReportChunkInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chunkmaster::ReportChunkInformationRsp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chunkmaster::AllocateUploadSlicesRsp>* AsyncAllocateUploadSlicesRaw(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkmaster::AllocateUploadSlicesRsp>* PrepareAsyncAllocateUploadSlicesRaw(::grpc::ClientContext* context, const ::chunkmaster::AllocateUploadSlicesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkmaster::FinishUploadSliceRsp>* AsyncFinishUploadSliceRaw(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkmaster::FinishUploadSliceRsp>* PrepareAsyncFinishUploadSliceRaw(::grpc::ClientContext* context, const ::chunkmaster::FinishUploadSliceReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkmaster::ReportChunkInformationRsp>* AsyncReportChunkInformationRaw(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chunkmaster::ReportChunkInformationRsp>* PrepareAsyncReportChunkInformationRaw(::grpc::ClientContext* context, const ::chunkmaster::ReportChunkInformationReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AllocateUploadSlices_;
    const ::grpc::internal::RpcMethod rpcmethod_FinishUploadSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_ReportChunkInformation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc  (Req) returns (Rsp);
    virtual ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response);
    virtual ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response);
    // For ChunkServer
    virtual ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AllocateUploadSlices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AllocateUploadSlices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AllocateUploadSlices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateUploadSlices(::grpc::ServerContext* context, ::chunkmaster::AllocateUploadSlicesReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkmaster::AllocateUploadSlicesRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinishUploadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FinishUploadSlice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FinishUploadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishUploadSlice(::grpc::ServerContext* context, ::chunkmaster::FinishUploadSliceReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkmaster::FinishUploadSliceRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReportChunkInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReportChunkInformation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReportChunkInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportChunkInformation(::grpc::ServerContext* context, ::chunkmaster::ReportChunkInformationReq* request, ::grpc::ServerAsyncResponseWriter< ::chunkmaster::ReportChunkInformationRsp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AllocateUploadSlices<WithAsyncMethod_FinishUploadSlice<WithAsyncMethod_ReportChunkInformation<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AllocateUploadSlices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AllocateUploadSlices() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkmaster::AllocateUploadSlicesReq, ::chunkmaster::AllocateUploadSlicesRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkmaster::AllocateUploadSlicesReq* request,
                 ::chunkmaster::AllocateUploadSlicesRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->AllocateUploadSlices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_AllocateUploadSlices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FinishUploadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FinishUploadSlice() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkmaster::FinishUploadSliceReq, ::chunkmaster::FinishUploadSliceRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkmaster::FinishUploadSliceReq* request,
                 ::chunkmaster::FinishUploadSliceRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FinishUploadSlice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_FinishUploadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReportChunkInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ReportChunkInformation() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::chunkmaster::ReportChunkInformationReq, ::chunkmaster::ReportChunkInformationRsp>(
          [this](::grpc::ServerContext* context,
                 const ::chunkmaster::ReportChunkInformationReq* request,
                 ::chunkmaster::ReportChunkInformationRsp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ReportChunkInformation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ReportChunkInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_AllocateUploadSlices<ExperimentalWithCallbackMethod_FinishUploadSlice<ExperimentalWithCallbackMethod_ReportChunkInformation<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AllocateUploadSlices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AllocateUploadSlices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AllocateUploadSlices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinishUploadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FinishUploadSlice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FinishUploadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReportChunkInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReportChunkInformation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReportChunkInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllocateUploadSlices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AllocateUploadSlices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AllocateUploadSlices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateUploadSlices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FinishUploadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FinishUploadSlice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FinishUploadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinishUploadSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReportChunkInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReportChunkInformation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReportChunkInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReportChunkInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AllocateUploadSlices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AllocateUploadSlices() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->AllocateUploadSlices(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_AllocateUploadSlices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void AllocateUploadSlices(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FinishUploadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FinishUploadSlice() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FinishUploadSlice(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FinishUploadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FinishUploadSlice(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReportChunkInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ReportChunkInformation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ReportChunkInformation(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ReportChunkInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ReportChunkInformation(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllocateUploadSlices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AllocateUploadSlices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkmaster::AllocateUploadSlicesReq, ::chunkmaster::AllocateUploadSlicesRsp>(std::bind(&WithStreamedUnaryMethod_AllocateUploadSlices<BaseClass>::StreamedAllocateUploadSlices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AllocateUploadSlices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllocateUploadSlices(::grpc::ServerContext* context, const ::chunkmaster::AllocateUploadSlicesReq* request, ::chunkmaster::AllocateUploadSlicesRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllocateUploadSlices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkmaster::AllocateUploadSlicesReq,::chunkmaster::AllocateUploadSlicesRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinishUploadSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FinishUploadSlice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkmaster::FinishUploadSliceReq, ::chunkmaster::FinishUploadSliceRsp>(std::bind(&WithStreamedUnaryMethod_FinishUploadSlice<BaseClass>::StreamedFinishUploadSlice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FinishUploadSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinishUploadSlice(::grpc::ServerContext* context, const ::chunkmaster::FinishUploadSliceReq* request, ::chunkmaster::FinishUploadSliceRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinishUploadSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkmaster::FinishUploadSliceReq,::chunkmaster::FinishUploadSliceRsp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReportChunkInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReportChunkInformation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::chunkmaster::ReportChunkInformationReq, ::chunkmaster::ReportChunkInformationRsp>(std::bind(&WithStreamedUnaryMethod_ReportChunkInformation<BaseClass>::StreamedReportChunkInformation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReportChunkInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReportChunkInformation(::grpc::ServerContext* context, const ::chunkmaster::ReportChunkInformationReq* request, ::chunkmaster::ReportChunkInformationRsp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReportChunkInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chunkmaster::ReportChunkInformationReq,::chunkmaster::ReportChunkInformationRsp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AllocateUploadSlices<WithStreamedUnaryMethod_FinishUploadSlice<WithStreamedUnaryMethod_ReportChunkInformation<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AllocateUploadSlices<WithStreamedUnaryMethod_FinishUploadSlice<WithStreamedUnaryMethod_ReportChunkInformation<Service > > > StreamedService;
};

}  // namespace chunkmaster


#endif  // GRPC_chunkmaster_2eproto__INCLUDED
